

function ListNode(val, next) {
    this.val = val;
    this.next = next || null;
}

const removeNthFromEnd = function(head, n) {
    // Create a dummy node to handle cases where the head needs to be removed
    let dummy = new ListNode(0);
    dummy.next = head;

    let first = dummy;
    let second = dummy;

    // Move the second pointer to the nth node from the start
    for (let i = 1; i <= n + 1; i++) {
        second = second.next;
    }

    // Move both pointers until the second pointer reaches the end
    while (second !== null) {
        first = first.next;
        second = second.next;
    }

    // Remove the nth node from the end
    first.next = first.next.next;

    return dummy.next;
};

// Example 1
const list1 = new ListNode(1);
list1.next = new ListNode(2);
list1.next.next = new ListNode(3);
list1.next.next.next = new ListNode(4);
list1.next.next.next.next = new ListNode(5);

const n1 = 2;
const removed1 = removeNthFromEnd(list1, n1);
console.log(removed1); // Output: [1, 2, 3, 5]

// Example 2
const list2 = new ListNode(1);

const n2 = 1;
const removed2 = removeNthFromEnd(list2, n2);
console.log(removed2); // Output: []

// Example 3
const list3 = new ListNode(1);
list3.next = new ListNode(2);

const n3 = 1;
const removed3 = removeNthFromEnd(list3, n3);
console.log(removed3); // Output: [1]
